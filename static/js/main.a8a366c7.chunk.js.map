{"version":3,"sources":["constants.ts","components/Button/Button.tsx","views/MainScreen/MainScreen.tsx","types/enums.ts","views/GameScreen/utils.ts","components/Step/Step.tsx","components/ScoreBoard/ScoreBoard.tsx","components/Act/utils.ts","components/Option/Option.tsx","components/Act/Act.tsx","views/GameScreen/GameScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FUNCTIONS","SYNTHETIC","END_GAME","END_ACT","Button","onClick","label","className","classes","type","defaultProps","MainScreen","text","buttonLabel","onButtonClick","addBackground","OptionTypes","PrizeTypes","SCREENS","getStringScore","s","toLocaleString","scoreSort","a","b","score","getRandomQuestion","questionIds","questions","max","scoreQuestionsLength","length","random","Math","floor","find","q","key","Next","Step","ScoreBoard","steps","currentStep","currency","map","currentType","current","selected","Current","Previous","getStepType","numberStr","getOptionType","optionId","results","correct","includes","Correct","wrong","Incorrect","Selected","Default","sleep","ms","Promise","resolve","setTimeout","item","id","disabled","Option","question","options","onEndAct","waitResults","waitSelected","Act","useState","setSelected","isDisabled","setIsDisabled","setResults","filter","useEffect","setResult","showResults","option","index","String","fromCharCode","charCodeAt","prev","GameScreen","onEndGame","setSteps","setScore","isMobile","setIsMobile","isScoreView","setIsScoreView","setQuestion","listener","entries","mobile","contentRect","width","scores","contains","Array","forEach","push","sort","parseQuestions","currentScore","resizeObserver","ResizeObserver","observe","document","documentElement","unobserve","curStep","randomQuestion","undefined","useCallback","isSuccessful","currentIndex","findIndex","nextScore","strScore","prevScore","strPrevScore","el","defaultAppConfig","name","App","START","currentScreen","setCurrentScreen","appInfo","setAppInfo","totalScore","setTotalScore","configData","GAME","END","renderScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8a366c7.chunk.js","sourcesContent":["import { SyntheticFunc, EndGameFunc, OnEndAct } from './types/types';\n\nconst defaultSynthetic : SyntheticFunc = () => undefined;\nconst defaultEndGame : EndGameFunc = () => undefined;\nconst defaultEndAct : OnEndAct = () => undefined;\n\ntype FuncType = {\n    SYNTHETIC: SyntheticFunc,\n    END_GAME: EndGameFunc,\n    END_ACT: OnEndAct\n};\n\nconst FUNCTIONS: FuncType = {\n  SYNTHETIC: defaultSynthetic,\n  END_GAME: defaultEndGame,\n  END_ACT: defaultEndAct,\n};\n\nexport default FUNCTIONS;\n","import React, { FC } from 'react';\n\nimport { SyntheticFunc } from '../../types/types';\nimport FUNCTIONS from '../../constants';\n\nconst defaultProps = {\n  onClick: FUNCTIONS.SYNTHETIC,\n  label: '',\n  className: '',\n};\n\ninterface ButtonProps {\n    className?: string,\n    onClick?: SyntheticFunc,\n    label?: string,\n}\n\nconst Button: FC<ButtonProps> = ({ onClick, label, className }) => {\n  const classes = `button ${className}`;\n  return (\n    <button className={classes} onClick={onClick} type=\"button\">\n      {label}\n    </button>\n  );\n};\n\nButton.defaultProps = defaultProps;\nexport default Button;\n","import React, { FC } from 'react';\nimport FUNCTIONS from '../../constants';\nimport Button from '../../components/Button/Button';\nimport { SyntheticFunc } from '../../types/types';\n\nconst defaultProps = {\n  label: '',\n  text: '',\n  buttonLabel: '',\n  onButtonClick: FUNCTIONS.SYNTHETIC,\n  addBackground: false,\n};\n\ninterface MainScreenProp {\n    label?: string,\n    text?: string,\n    buttonLabel?: string,\n    onButtonClick?: SyntheticFunc,\n    addBackground?: boolean\n}\n\nconst MainScreen: FC<MainScreenProp> = ({\n  label, text, buttonLabel, onButtonClick, addBackground,\n}) => {\n  const classes = `main-screen ${addBackground ? 'add-background' : ''}`;\n  return (\n    <div className={classes}>\n      <div className=\"main-image-container\" />\n      <div className=\"main-text-container\">\n        <p className=\"game-label\">{label}</p>\n        <p className=\"game-header\">{text}</p>\n        <Button className=\"game-button\" label={buttonLabel} onClick={onButtonClick} />\n      </div>\n    </div>\n  );\n};\n\nMainScreen.defaultProps = defaultProps;\nexport default MainScreen;\n","export enum OptionTypes {\n    Correct = 'correct',\n    Incorrect = 'incorrect',\n    Selected = 'selected',\n    Default = 'default'\n}\n\nexport enum PrizeTypes {\n    Next = 'next',\n    Current = 'current',\n    Previous = 'prev'\n}\n\nexport enum SCREENS {\n    START= 'start',\n    GAME='game',\n    END='end'\n}\n","import { IQuestion, IScore } from '../../types/interfases';\n\nexport const getStringScore = (s: number) : string => s.toLocaleString();\n\nconst scoreSort = (a: IScore, b: IScore): number => a.score - b.score;\n\nexport function parseQuestions(questions: Array<IQuestion>): Array<IScore> {\n  if (!questions) return [];\n  const steps = new Array<IScore>();\n  let contains;\n\n  questions.forEach((q) => {\n    contains = steps.find((s) => s.score === q.score);\n    if (contains) {\n      contains.questions.push(q.key);\n    } else {\n      steps.push({ score: q.score, questions: [q.key] });\n    }\n  });\n  steps.sort(scoreSort);\n  return steps;\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function getRandomQuestion(\n  questionIds: Array<string>, questions: Array<IQuestion>,\n): IQuestion | undefined {\n  const scoreQuestionsLength = questionIds.length;\n  const random = questionIds[getRandomInt(scoreQuestionsLength)];\n\n  const randomQuestion = questions.find((q) => q.key === random);\n  return randomQuestion;\n}\n","import React, { FC } from 'react';\n\nimport { PrizeTypes } from '../../types/enums';\n\nconst defaultProps = {\n  text: '1000',\n  type: PrizeTypes.Next,\n};\n\ninterface StepProps {\n    text?: string,\n    type?: PrizeTypes\n}\n\nconst Step : FC<StepProps> = ({ text, type }) => (\n  <div className={`step-container line-container step-type-${type}`}>\n    <div className=\"image-base step\">\n      {text}\n    </div>\n  </div>\n);\n\nStep.defaultProps = defaultProps;\n\nexport default Step;\n","import React, { FC } from 'react';\n\nimport { getStringScore } from '../../views/GameScreen/utils';\nimport { PrizeTypes } from '../../types/enums';\nimport Step from '../Step/Step';\n\nconst defaultProps = {\n  steps: [],\n  currentStep: 0,\n  currency: '$',\n};\n\ninterface ScoreBoardProp {\n    steps?: Array<number>,\n    currentStep?: number,\n    currency?: string\n}\n\nfunction getStepType(current: number, selected: number | undefined): PrizeTypes {\n  switch (true) {\n    case current === selected:\n      return PrizeTypes.Current;\n    case selected && current > selected:\n      return PrizeTypes.Next;\n    default:\n      return PrizeTypes.Previous;\n  }\n}\n\nconst ScoreBoard: FC<ScoreBoardProp> = ({ steps, currentStep, currency }) => (\n  <div className=\"score-container\">\n    {steps && steps.map((s) => {\n      const currentType = getStepType(s, currentStep);\n      const numberStr = getStringScore(s);\n      return <Step text={`${currency}${numberStr}`} type={currentType} key={numberStr} />;\n    })}\n  </div>\n);\n\nScoreBoard.defaultProps = defaultProps;\nexport default ScoreBoard;\n","import { IActResult } from '../../types/interfases';\nimport { OptionTypes } from '../../types/enums';\n\nexport function getOptionType(\n  optionId: string, selected: string[], results: IActResult,\n): OptionTypes {\n  switch (true) {\n    case results.correct.includes(optionId):\n      return OptionTypes.Correct;\n    case results.wrong.includes(optionId):\n      return OptionTypes.Incorrect;\n    case selected.includes(optionId):\n      return OptionTypes.Selected;\n    default:\n      return OptionTypes.Default;\n  }\n}\n\nexport function sleep(ms: number): any {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function getLetter(id: number): string {\n  return String.fromCharCode('A'.charCodeAt(0) + id);\n}\n","import React, { FC } from 'react';\n\nimport { SyntheticFunc } from '../../types/types';\nimport { IOption } from '../../types/interfases';\nimport { OptionTypes } from '../../types/enums';\nimport FUNCTIONS from '../../constants';\n\nconst defaultItem: IOption = { id: 'H', text: 'Hello' };\nconst defaultProps = {\n  onClick: FUNCTIONS.SYNTHETIC,\n  item: defaultItem,\n  type: OptionTypes.Default,\n  disabled: false,\n};\n\ninterface OptionProps {\n    item?: IOption,\n    type?: OptionTypes,\n    onClick?: SyntheticFunc,\n    disabled?: boolean\n}\n\nconst Option : FC<OptionProps> = ({\n  item, type, onClick, disabled,\n}) => (\n  <button\n    className={`option-container line-container \n    option-type-${type} \n    ${disabled || type !== OptionTypes.Default ? 'no-hover' : 'can-hover'}\n    `}\n    onClick={onClick}\n    type=\"button\"\n    disabled={disabled}\n  >\n    <div className=\"option image-base\">\n      {item && (\n      <div className=\"option-text-container\">\n        <span className=\"option-text option-id\">{item.id}</span>\n        <p className=\"option-text option-label\">{item.text}</p>\n      </div>\n      )}\n    </div>\n  </button>\n);\n\nOption.defaultProps = defaultProps;\n\nexport default Option;\n","import React, { FC, useEffect, useState } from 'react';\n\nimport { IActResult, IOption } from '../../types/interfases';\nimport { getLetter, getOptionType, sleep } from './utils';\nimport { OnEndAct } from '../../types/types';\nimport FUNCTIONS from '../../constants';\nimport Option from '../Option/Option';\n\nconst defaultProps = {\n  question: '',\n  options: [],\n  correct: [],\n  onEndAct: FUNCTIONS.END_ACT,\n  waitResults: 1000,\n  waitSelected: 1500,\n};\n\ninterface ActProp {\n    question?: string,\n    options?: IOption[],\n    correct?: string[],\n    onEndAct?: OnEndAct,\n    waitSelected?: number,\n    waitResults?: number\n}\n\nconst Act: FC<ActProp> = ({\n  question, options, correct, onEndAct,\n  waitResults, waitSelected,\n}) => {\n  const [selected, setSelected] = useState<Array<string>>([]);\n  const [isDisabled, setIsDisabled] = useState(false);\n  const [results, setResults] = useState<IActResult>({ correct: [], wrong: [] });\n\n  async function setResult(): Promise<void> {\n    setIsDisabled(true);\n    await sleep(waitSelected || defaultProps.waitSelected);\n    setResults({\n      correct: correct || [],\n      wrong: selected.filter((s) => !correct?.includes(s)),\n    });\n  }\n\n  async function showResults(): Promise<void> {\n    await sleep(waitResults || defaultProps.waitResults);\n    if (onEndAct) onEndAct(!results.wrong.length);\n  }\n\n  useEffect(() => {\n    if (selected.length === correct?.length) setResult();\n  }, [selected, correct, waitSelected]);\n\n  useEffect(() => {\n    if (results.correct.length) showResults();\n  }, [results, waitResults]);\n\n  const onOptionClick = (optionId: string): void => {\n    setSelected((prev) => [...prev, optionId]);\n  };\n\n  return (\n    <div className=\"act-container\">\n      <p className=\"game-label\">{question}</p>\n      <div className=\"options-container\">\n        {options && options.map((option: IOption, index) => (\n          <Option\n            key={option.id}\n            disabled={isDisabled}\n            item={{ id: getLetter(index), text: option.text }}\n            type={getOptionType(option.id, selected, results)}\n            onClick={() => onOptionClick(option.id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nAct.defaultProps = defaultProps;\nexport default Act;\n","import React, {\n  FC, useCallback, useEffect, useState,\n} from 'react';\nimport { ResizeObserver } from 'resize-observer';\n\nimport ScoreBoard from '../../components/ScoreBoard/ScoreBoard';\nimport Act from '../../components/Act/Act';\n\nimport { getRandomQuestion, getStringScore, parseQuestions } from './utils';\nimport { IQuestion, IScore } from '../../types/interfases';\nimport { EndGameFunc } from '../../types/types';\nimport FUNCTIONS from '../../constants';\n\nconst defaultProps = {\n  currency: '$',\n  questions: [],\n  onEndGame: FUNCTIONS.END_GAME,\n};\n\ninterface GameScreenProp {\n    currency?: string,\n    questions?: IQuestion[],\n    onEndGame?: EndGameFunc\n}\n\nconst GameScreen: FC<GameScreenProp> = ({ questions, onEndGame, currency }) => {\n  const [steps, setSteps] = useState<Array<IScore>>([]);\n  const [score, setScore] = useState(0);\n  const [isMobile, setIsMobile] = useState(false);\n  const [isScoreView, setIsScoreView] = useState(false);\n  const [question, setQuestion] = useState<IQuestion | undefined>();\n\n  const listener = (entries: any) => {\n    if (entries && entries[0]) {\n      const mobile = entries[0].contentRect.width < 900;\n\n      if (isMobile !== mobile) {\n        setIsScoreView(!mobile);\n        setIsMobile(mobile);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (questions) {\n      const scores = parseQuestions(questions);\n      const currentScore = scores[0];\n\n      setSteps(scores);\n      setScore(currentScore ? currentScore.score : 0);\n    }\n  }, [questions]);\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(listener);\n    resizeObserver.observe(document.documentElement);\n    return () => resizeObserver.unobserve(document.documentElement);\n  }, [isMobile]);\n\n  useEffect(() => {\n    const curStep = steps.find((s) => s.score === score);\n    const randomQuestion = curStep\n      ? getRandomQuestion(curStep.questions, questions || [])\n      : undefined;\n\n    setQuestion(randomQuestion);\n  }, [score, questions]);\n\n  const onEndAct = useCallback((isSuccessful: boolean) => {\n    const currentIndex = steps.findIndex((s) => s.score === score);\n    const nextScore = steps[currentIndex + 1];\n    const strScore = getStringScore(score);\n\n    const prevScore = steps[currentIndex - 1];\n    const strPrevScore = getStringScore(prevScore ? prevScore.score : 0);\n\n    switch (true as boolean) {\n      case (isSuccessful && !nextScore):\n        if (onEndGame) onEndGame(strScore, true);\n        break;\n      case isSuccessful:\n        setScore(nextScore.score);\n        break;\n      default:\n        if (onEndGame) onEndGame(strPrevScore, false);\n        break;\n    }\n  }, [steps, score, onEndGame]);\n\n  const renderAct = () => question && (\n    <Act\n      question={question.question}\n      key={question.key}\n      options={question.options}\n      correct={question.correct}\n      onEndAct={(s) => onEndAct(s)}\n    />\n  );\n\n  const renderScore = () => (\n    <ScoreBoard\n      currency={currency}\n      currentStep={score}\n      steps={(steps.map((el) => el.score))}\n    />\n  );\n\n  return (\n    <div className=\"game-container\">\n      {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n      <button\n        className={`mobile-buttons image-${isScoreView ? 'close' : 'menu'}`}\n        onClick={() => setIsScoreView(!isScoreView)}\n        type=\"button\"\n      />\n      { (!isMobile || !isScoreView) && renderAct() }\n      { (!isMobile || isScoreView) && renderScore() }\n    </div>\n  );\n};\n\nGameScreen.defaultProps = defaultProps;\nexport default GameScreen;\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\n\nimport './App.css';\nimport configData from './config.json';\n\nimport MainScreen from './views/MainScreen/MainScreen';\nimport GameScreen from './views/GameScreen/GameScreen';\nimport { IApp } from './types/interfases';\nimport { SCREENS } from './types/enums';\n\nconst defaultAppConfig = { name: 'Millionaire', currency: '$', questions: [] };\nconst App: React.FC = () => {\n  const [currentScreen, setCurrentScreen] = useState(SCREENS.START);\n  const [appInfo, setAppInfo] = useState<IApp>(defaultAppConfig);\n  const [totalScore, setTotalScore] = useState('0');\n\n  useEffect(() => {\n    setAppInfo(configData);\n  }, []);\n\n  function endGame(score: string): void {\n    setTotalScore(score);\n    setCurrentScreen(SCREENS.END);\n  }\n\n  const renderScreen = (): React.ReactElement => {\n    if (appInfo === null) return <> </>;\n\n    switch (currentScreen) {\n      case SCREENS.START:\n        return (\n          <MainScreen\n            text={appInfo.name}\n            buttonLabel=\"Start\"\n            onButtonClick={() => setCurrentScreen(SCREENS.GAME)}\n            addBackground\n          />\n        );\n      case SCREENS.GAME:\n        return <GameScreen questions={appInfo.questions} onEndGame={(s) => endGame(s)} />;\n      default:\n        return (\n          <MainScreen\n            label=\"Total score: \"\n            text={`${appInfo.currency}${totalScore} earned`}\n            buttonLabel=\"Try again\"\n            onButtonClick={() => setCurrentScreen(SCREENS.START)}\n          />\n        );\n    }\n  };\n\n  return <div className=\"App\">{renderScreen()}</div>;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}